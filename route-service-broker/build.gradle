buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from: 'gradle/pipeline.gradle'

group = 'io.pivotal'
version = getProp('newVersion') ?: '0.0.1.BUILD-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
}

ext['spring-security.version'] = '5.1.0.RELEASE'
ext {
	springCloudVersion = 'Finchley.SR1'
	projectGroupId = project.group
	projectArtifactId = project.name
	projectVersion = project.version
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-security')

	compile('org.springframework.cloud:spring-cloud-starter-gateway')
	compile('org.springframework.cloud:spring-cloud-starter-open-service-broker:3.0.0.BUILD-SNAPSHOT')

	compile('org.springframework.boot:spring-boot-starter-cloud-connectors')
	compile('org.springframework.boot:spring-boot-starter-data-redis-reactive')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.apache.commons:commons-pool2:2.2')
	compileOnly('org.projectlombok:lombok')
	compileOnly ("org.springframework.boot:spring-boot-configuration-processor")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
	testCompile('org.springframework.security:spring-security-test')
}

publishing {
        repositories {
                maven {
                        url getProp('REPO_WITH_BINARIES_FOR_UPLOAD') ?: 'http://localhost:8081/artifactory/libs-release-local'
                        credentials {
                                username getProp('M2_SETTINGS_REPO_USERNAME') ?: 'admin'
                                password getProp('M2_SETTINGS_REPO_PASSWORD') ?: 'password'
                        }
                }
        }
        publications {
                mavenJava(MavenPublication) {
                        artifactId project.name
                        from components.java
                }
        }
}

String getProp(String propName) {
        return hasProperty(propName) ?
                        (getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
                        System.getenv(propName)
}
